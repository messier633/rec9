def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,def func2(arg7, arg8):
    def func3(arg9, arg10):
        def func4(arg11, arg12):
            var13 = (arg8 & (arg12 + -194521246) | (-1964394079 & arg8)) + (arg8 + arg9)
            var14 = arg7 ^ arg11 ^ arg8
            if arg11 < arg11:
                var15 = 1911714535 - (((arg11 + arg11) | 919 | arg11 ^ (arg12 | arg9)) & (arg8 ^ arg10)) ^ arg9
            else:
                var15 = arg9 ^ (450810873 + arg11 - -690 | arg10) & arg11
            var16 = (arg10 + arg7 ^ arg9) ^ arg11 ^ -336 & arg8 ^ 718239040 + (arg7 - arg7) & (600 | var14) + var13 & arg7 + arg8
            var17 = arg8 + arg8
            result = var14 & -742483265 ^ 1270280429
            return result
        var18 = func4(arg10, arg7)
        var22 = func5(arg7, arg9)
        var23 = 42 - arg7 + var22
        var24 = arg8 | (arg7 | var23 ^ ((((var23 ^ var18) ^ arg7 ^ (arg9 & ((arg10 & arg7) - var23) | (var18 & (593 - arg10) + arg8 & arg7 & arg10 - var22) | arg7)) ^ var23) ^ arg8 - arg8 & var18))
        result = 16134078 + (var18 - (var23 & arg10))
        return result
    var25 = func3(arg8, arg7)
    var30 = func7(arg8, arg7)
    var35 = func8(arg8, var25)
    var36 = var25 + var30 & -404327947
    var37 = ((arg7 | -970) - arg8) - arg8
    var38 = (var37 - var36) + (1908258137 & arg7)
    var39 = (arg7 + -18481652) & 1448976213 - -1434105954
    if arg7 < arg8:
        var40 = var25 ^ 1438238426
    else:
        var40 = -878 | var30 | 436 - -138626283
    var41 = arg8 & arg7 ^ 410 ^ var25
    var42 = (var39 ^ 313 - var39) & var41
    var43 = var36 + (var37 ^ arg8) ^ var37
    var44 = (var43 + -1697673418) ^ -408 | arg7
    if arg8 < var43:
        var45 = var39 - var39
    else:
        var45 = (-827 ^ var37) | (-366100406 ^ var25)
    result = var35 & var41
    return result
def func8(arg31, arg32):
    var33 = 0
    for var34 in range(37):
        var33 += var33 - (arg32 ^ arg31)
    return var33
def func7(arg26, arg27):
    var28 = 0
    for var29 in range(17):
        var28 += -7 - var29 - arg27
    return var28
def func1(arg1, arg2):
    var3 = arg2 ^ (794323739 | -403)
    var4 = arg2 - (-187036541 & ((var3 & var3 + (arg2 & ((-909919997 + -284 + (arg2 & var3) & var3 & arg1 | var3 - -515805328 ^ -449) | arg1))) ^ var3) - arg2 - ((arg1 + (694040188 | arg1)) ^ 468) ^ arg1)
    var5 = (arg1 & -1609235086 ^ var3 | arg1 ^ ((876 & -313 & (var4 + arg2)) | arg1) | arg2) - (657613984 + 917) & 1759619689 - 1055440114 & (-694 & (-1119884352 & -968) - 26 | (var3 + var3) - var4 & 1995107045)
    var6 = -323601528 | arg2 - -740 - var3
    result = var5 & var5
    return result
def func5(arg19, arg20):
    closure = [0]
    def func6(acc, rest):
        var21 = 7 ^ 9 & closure[0] & 7 ^ 7 + 7 - 7
        closure[0] += var21
        if acc == 0:
            return var21
        else:
            result = func6(acc - 1, var21)
            return result
    result = func6(10, 0)
    return result
if __name__ == "__main__":
    print 'prog_size: 0'
    print 'func_number: 2'
    print 'arg_number: 7'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
    print 'prog_size: 5'
    print 'func_number: 9'
    print 'arg_number: 46'
    for i in xrange(25000):
        x = 5
        x = func2(x, i)
        print x,
